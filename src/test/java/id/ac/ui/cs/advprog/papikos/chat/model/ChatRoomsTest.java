package id.ac.ui.cs.advprog.papikos.chat.model;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.time.LocalDateTime;

class ChatRoomsTest {
    private static final Long USER1_ID = 101L;
    private static final Long USER2_ID = 202L;

    @Test
    void testCreateChatRoomsViaAllArgsConstructor() {
        LocalDateTime createdAt = LocalDateTime.now();
        LocalDateTime updatedAt = LocalDateTime.now();
        LocalDateTime lastMessageAt = LocalDateTime.now();

        ChatRoom room = new ChatRoom(
                1L,
                USER1_ID,
                USER2_ID,
                lastMessageAt,
                createdAt,
                updatedAt
        );

        assertEquals(1L, room.getRoomId());
        assertEquals(USER1_ID, room.getUser1Id());
        assertEquals(USER2_ID, room.getUser2Id());
        assertEquals(lastMessageAt, room.getLastMessageAt());
        assertEquals(createdAt, room.getCreatedAt());
        assertEquals(updatedAt, room.getUpdatedAt());
    }

    @Test
    void testUserIdValidationSuccess() {
        assertDoesNotThrow(() -> new ChatRoom(USER1_ID, USER2_ID));
    }

    @Test
    void testUserIdCannotBeEqual() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, USER1_ID));
    }


    @Test
    void testUserIdAutoSwap() {
        ChatRoom room = new ChatRoom(USER2_ID, USER1_ID);

        assertEquals(USER1_ID, room.getUser1Id());
        assertEquals(USER2_ID, room.getUser2Id());
    }

    @Test
    void testDefaultValuesViaCustomConstructor() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);

        assertNull(room.getRoomId());
        assertNull(room.getLastMessageAt());
        assertNotNull(room.getCreatedAt());
        assertNotNull(room.getUpdatedAt());
    }

    @Test
    void testLastMessageAtUpdate() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);
        LocalDateTime testTime = LocalDateTime.now();

        room.setLastMessageAt(testTime);
        assertEquals(testTime, room.getLastMessageAt());
    }

    @Test
    void testAutoGeneratedTimestamps() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);

        assertNotNull(room.getCreatedAt());
        assertNotNull(room.getUpdatedAt());
        assertTrue(room.getUpdatedAt().isAfter(room.getCreatedAt().minusSeconds(1)));
    }

    @Test
    void testInvalidUserIds() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(-1L, USER2_ID));
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, -1L));
    }

    @Test
    void testNullUserIds() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(null, USER2_ID));
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, null));
    }
}