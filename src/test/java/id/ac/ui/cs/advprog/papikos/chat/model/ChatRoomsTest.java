package id.ac.ui.cs.advprog.papikos.chat.model;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import java.time.LocalDateTime;
import java.util.UUID;

class ChatRoomsTest {
    private static final UUID USER1_ID = UUID.fromString("c12a3c98-b05f-4d67-a2cc-bc741577cf1a");
    private static final UUID USER2_ID = UUID.fromString("42abf604-4a75-4425-b98a-7fa6da52cc4b");

    @Test
    void testCreateChatRoomsViaAllArgsConstructor() {
        LocalDateTime createdAt = LocalDateTime.now();
        LocalDateTime updatedAt = LocalDateTime.now();
        LocalDateTime lastMessageAt = LocalDateTime.now();

        ChatRoom room = new ChatRoom(
                UUID.randomUUID(),
                USER1_ID,
                USER2_ID,
                lastMessageAt,
                createdAt,
                updatedAt
        );

        assertNotNull(room.getRoomId());
        assertEquals(USER1_ID, room.getUser1Id());
        assertEquals(USER2_ID, room.getUser2Id());
        assertEquals(lastMessageAt, room.getLastMessageAt());
        assertEquals(createdAt, room.getCreatedAt());
        assertEquals(updatedAt, room.getUpdatedAt());
    }

    @Test
    void testUserIdValidationSuccess() {
        assertDoesNotThrow(() -> new ChatRoom(USER1_ID, USER2_ID));
    }

    @Test
    void testUserIdCannotBeEqual() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, USER1_ID));
    }

    @Test
    void testUserIdAutoSwap() {
        ChatRoom room = new ChatRoom(USER2_ID, USER1_ID);

        assertEquals(USER1_ID, room.getUser1Id());
        assertEquals(USER2_ID, room.getUser2Id());
    }

    @Test
    void testDefaultValuesViaCustomConstructor() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);

        assertNull(room.getRoomId());
        assertNull(room.getLastMessageAt());
        assertNull(room.getCreatedAt()); // waktu diambil dari database
        assertNull(room.getUpdatedAt()); // waktu diambil dari database
    }

    @Test
    void testLastMessageAtUpdate() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);
        LocalDateTime testTime = LocalDateTime.now();

        room.setLastMessageAt(testTime);
        assertEquals(testTime, room.getLastMessageAt());
    }

    @Test
    void testAutoGeneratedTimestamps() {
        ChatRoom room = new ChatRoom(USER1_ID, USER2_ID);

        assertNull(room.getCreatedAt());
        assertNull(room.getUpdatedAt());
    }

    @Test
    void testInvalidUserIds() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(null, USER2_ID));
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, null));
    }

    @Test
    void testNullUserIds() {
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(null, USER2_ID));
        assertThrows(IllegalArgumentException.class, () -> new ChatRoom(USER1_ID, null));
    }
}
